/** Declaration file generated by dts-gen */

export as namespace ControlKit;

export class Panel {
    constructor(parent: any, params: any);

    /**
     * Adds a new Group to the Panel.
     * @param {Object} [params] - Group options
     * @param {String} [params.label=''] - The Group label string
     * @param {Boolean} [params.useLabel=true] - Trigger whether all contained SubGroups and Components should use labels
     * @param {Boolean} [params.enable=true] - Defines initial state open / closed
     * @param {Number} [params.height=null] - Defines if the height of the Group should be constrained to certain height
     * @returns {Panel}
     */
    addGroup(params: any): Panel;

   /**
    * Adds a new SubGroup to the last added Group.
    * @param {Object} [params] - SubGroup options
    * @param {String} [params.label=''] - The SubGroup label string
    * @param {Boolean} [params.useLabel=true] - Trigger whether all Components should use labels
    * @param {Boolean} [params.enable=true] - Defines initial state open / closed
    * @param {Number} [params.height=null] - Defines if the height of the SubGroup should be constrained to certain height
    * @returns {Panel}
    */
    addSubGroup(params: any): Panel;

    /**
     * Adds a new StringInput to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {Object} [params] - StringInput options
     * @param {String} [params.label=value] - StringInput label
     * @param {Function} [params.onChange] - Callback on change
     * @param {Array} [params.presets] - A set of presets
     * @returns {Panel}
     */
    addStringInput(object: any, value: String, params: any): Panel;
    /**
     * Adds a new NumberInput to last added SubGroup.
     * @param {Object} object - The object.
     * @param {String} value - The property key.
     * @param {Object} [params] - Component options.
     * @param {String} [params.label=value] - NumberInput label
     * @param {Function} [params.onChange] - Callback on change
     * @param {Number} [params.step] - Amount subbed/added on arrowDown/arrowUp press
     * @param {Number} [params.dp] - Decimal places displayed
     * @param {Array} [params.presets] - A set of presets
     * @returns {Panel}
     */
    addNumberInput(object: any, value: String, params: any): Panel;
    
    /**
     * Adds a new Range input to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Range label
     * @param {Function} [params.onChange] - Callback on change
     * @param {Number} [params.step] - Amount subbed/added on arrowDown/arrowUp press
     * @param {Number} [params.dp] - Decimal places displayed
     * @returns {Panel}
     */
    addRange(object: any, value: String, params: any): Panel;
    
    /**
     * Adds a new Checkbox to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Checkbox label
     * @param {Function} [params.onChange] - Callback on change
     * @returns {Panel}
     */
    addCheckbox(object: any, value: String, params: any): Panel;
    
    /**
     * Adds a new Color modifier to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Color label
     * @param {Function} [params.onChange] - Callback on change
     * @param {String} [params.colorMode='rgb'] - The colorMode to be used: 'hex' #ff00ff, 'rgb' [255,0,255], 'rgbfv' [1,0,1]
     * @param {Array} [params.presets] - A set of preset colors matching params.colorMode
     * @returns {Panel}
     */
    addColor(object: any, value: String, params: any): Panel;

    /**
     * Adds a new Button to last added SubGroup.
     * @param {String} label - The object
     * @param {Function} onPress - Callback
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Button label
     * @returns {Panel}
     */
    addButton(label: string, value: Function, params: any): Panel;

    /**
     * Adds a new Select to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Button label
     * @param {Function} [params.onChange] - Callback on change - function(index){}
     * @param {String} [params.target] - The property to be set on select
     * @returns {Panel}
     */
    addSelect(object: any, value: String, params: any): Panel;

    /**
     * Adds a new Slider to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {String} range - The min/max array key to be used
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Slider label
     * @param {Function} [params.onChange] - Callback on change
     * @param {Function} [params.onFinish] - Callback on finish
     * @param {Number} [params.step] - Amount subbed/added on arrowDown/arrowUp press inside the input
     * @param {Number} [params.dp] - Decimal places displayed
     * @returns {Panel}
     */
    addSlider(object: any, value: String, params: any): Panel;

    /**
     * Adds a new FunctionPlotter to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key - f(x), f(x,y)
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - FunctionPlotter label
     * @returns {Panel}
     */
    addFunctionPlotter(object: any, value: String, params: any): Panel;
    
    /**
     * Adds a new ValuePlotter to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Plotter label
     * @param {Number} [params.height] - Plotter height
     * @param {Number} [params.resolution] - Graph resolution
     * @returns {Panel}
     */
    addValuePlotter(object: any, value: String, params: any): Panel;
    
    /**
     * Adds a new NumberOutput to last added SubGroup.
     * @param {Object} object - The object
     * @param {String} value - The property key
     * @param {Object} [params] - Component options
     * @param {String} [params.label=value] - Output label
     * @param {Number} [params.dp] - Decimal places displayed
     * @returns {Panel}
     */
    addNumberOutput(object: any, value: String, params: any): Panel;
}

export class ControlKit {
    constructor(options: any, ...args: any[]);

    addPanel(params: any): Panel;

    disable(): void;

    enable(): void;

    getNode(): any;

    historyIsEnabled(): any;

    loadSettings(data: any): void;

    onHistoryStatePop(): void;

    onHistoryStatePush(): void;

    panelsAreClosable(): any;

    setShortcutEnable(char: any): void;

    statesAreEnabled(): any;

    update(): void;

    static destroy(): void;

}

export namespace ControlKit {

    export class Canvas {
        constructor(parent: any, params: any, ...args: any[]);

        getCanvas(): any;

        getContext(): any;

        onGroupSizeChange(): void;

    }

    export class SVG {
        constructor(parent: any, params: any, ...args: any[]);

        getSVG(): any;

        onGroupSizeChange(): void;

    }
    
}
